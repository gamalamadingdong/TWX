def populate_vulnerability_techniques():
    """
    Populate vulnerability_techniques table from vulnerability_attack_mappings.
    This bridges the gap between the mappings and the classification process.
    """
    db = VulnerabilityDatabase()
    conn = db.connect()
    cursor = conn.cursor()
    
    try:
        # Create the table if it doesn't exist
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS vulnerability_techniques (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            vuln_id TEXT,
            technique_id TEXT,
            FOREIGN KEY (vuln_id) REFERENCES vulnerabilities(id),
            FOREIGN KEY (technique_id) REFERENCES attack_techniques(technique_id)
        )
        ''')
        
        # Copy relevant data from vulnerability_attack_mappings
        cursor.execute('''
        INSERT INTO vulnerability_techniques (vuln_id, technique_id)
        SELECT DISTINCT vuln_id, technique_id FROM vulnerability_attack_mappings
        ''')
        
        count = cursor.rowcount
        conn.commit()
        print(f"Successfully populated vulnerability_techniques with {count} records")
        return True
        
    except Exception as e:
        print(f"Error populating vulnerability_techniques: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()