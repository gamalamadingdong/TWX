import os
import json
import psycopg2
import psycopg2.extras
import pandas as pd
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class VulnerabilityDatabase:
    """PostgreSQL-based database for storing and querying vulnerability data."""
    
    def __init__(self, db_name="twx_vulnerabilities", host="localhost", port="5432", 
                 user="postgres", password=None, create_tables=True):
        """Initialize the database connection."""
        self.db_name = db_name
        self.host = host
        self.port = port
        self.user = user
        self.password = password
        self.conn = None
        
        if create_tables:
            self.create_tables()
    
    def optimize_database(self):
        """Run analysis and optimizations on the database."""
        conn = self.connect()
        cursor = conn.cursor()
        
        print("Running ANALYZE to update statistics...")
        cursor.execute("ANALYZE")
        
        # Get some statistics
        stats = {}
        
        # Count records in main tables
        for table in ['vulnerabilities', 'products', 'weaknesses', 'vuln_references']:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            stats[f'{table}_count'] = cursor.fetchone()[0]
        
        return stats
    
    def connect(self):
        """Create a connection to the PostgreSQL database."""
        if self.conn is None or self.conn.closed:
            # Connect to PostgreSQL
            self.conn = psycopg2.connect(
                dbname=self.db_name,
                user=self.user,
                password=self.password,
                host=self.host,
                port=self.port
            )
            # Enable autocommit to simplify transaction handling
            self.conn.autocommit = True
        return self.conn
    
    def close(self):
        """Close the database connection."""
        if self.conn:
            self.conn.close()
            self.conn = None

    def column_exists(self, table, column):
        """Check if a column exists in a table."""
        conn = self.connect()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = %s AND column_name = %s
        """, (table, column))
        return cursor.fetchone() is not None

    def create_tables(self):
        """Create the necessary tables if they don't exist."""
        conn = self.connect()
        cursor = conn.cursor()
           
        # Create vulnerabilities table - PostgreSQL syntax
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS vulnerabilities (
            id TEXT PRIMARY KEY,
            description TEXT,
            published_date TEXT,
            modified_date TEXT,
            known_exploited INTEGER DEFAULT 0,
            has_exploit INTEGER DEFAULT 0,
            has_cisa_advisory INTEGER DEFAULT 0,
            has_vendor_advisory INTEGER DEFAULT 0,
            epss_score REAL,
            epss_percentile REAL,
            kev_date_added TEXT,
            kev_vendor_project TEXT,
            kev_product TEXT,
            kev_notes TEXT,
            kev_required_action TEXT,
            kev_due_date TEXT,
            data JSONB
        )
        ''')
        
        # Create weaknesses (CWE) table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS weaknesses (
            cwe_id TEXT PRIMARY KEY,
            name TEXT,
            description TEXT,
            extended_description TEXT,
            category TEXT,
            abstraction TEXT,
            status TEXT,
            likelihood TEXT,
            mitigations_text TEXT
        )
        ''')
        
        # Create vulnerability_weaknesses (many-to-many) table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS vulnerability_weaknesses (
            vuln_id TEXT,
            cwe_id TEXT,
            PRIMARY KEY (vuln_id, cwe_id),
            FOREIGN KEY (vuln_id) REFERENCES vulnerabilities(id),
            FOREIGN KEY (cwe_id) REFERENCES weaknesses(cwe_id)
        )
        ''')
        
        # Create other tables...
        
        # Create indexes
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_vuln_weaknesses_vuln_id ON vulnerability_weaknesses (vuln_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_vuln_weaknesses_cwe_id ON vulnerability_weaknesses (cwe_id)")
        
        # Commit changes
        conn.commit()
    
    # Update all SQL queries to use PostgreSQL syntax...